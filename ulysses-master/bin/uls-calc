#!/usr/bin/env python
import numpy as np
import ulysses
from scipy.special import zeta

__doc__="""

%prog -m 1

DME --ordering 0 --loop -o evol.pdf  PARAMETERFILE

Example parameter file:

m     -1      # logarithm, in [ev]
M1    12      # logarithm, in [GeV]
M2    12.6    # logarithm, in [GeV]
M3    13      # logarithm, in [GeV]
delta 213     # [deg]
a21    81     # [deg]
a31   476     # [deg]
x1     90     # [deg]
x2     87     # [deg]
x3    180     # [deg]
y1   -120     # [deg]
y2      0     # [deg]
y3   -120     # [deg]
t12    33.63  # [deg]
t13     8.52  # [deg]
t23    49.58  # [deg]
"""

def plotEvolution(LEPTO, f_out):
    data = LEPTO.evolData
    active = LEPTO.flavourindices()
    labels= LEPTO.flavourlabels()
    import pylab
    for idx, lab in zip(active, labels):
        pylab.plot(data[:,0], abs(data[:,idx]), label=lab)
    pylab.plot(data[:,0], abs(data[:,-1]), label="$|\eta_B|$")
    pylab.legend()
    try:
        pylab.xlabel(LEPTO.evolname)
    except:
        pylab.xlabel("z")
    pylab.yscale("log")
    pylab.xscale("log")
    pylab.ylabel("$\left|N_{xx} \\right|, \eta_B$")
    pylab.tight_layout()
    pylab.savefig(f_out)




if __name__=="__main__":

    import optparse, os, sys
    op = optparse.OptionParser(usage=__doc__)
    op.add_option("-o", "--output",    dest="OUTPUT",      default=None, type=str, help="Output file name for evolution plots/data --- if not provided, only calculate etaB (default: %default)")
    op.add_option("-v", "--debug",     dest="DEBUG",       default=False, action="store_true", help="Turn on some debug messages")
    op.add_option("-m", "--model",     dest="MODEL",       default="1DME", help="Selection of of model (default: %default)")
    op.add_option("--zrange",          dest="ZRANGE",      default="0.1,100,1000", help="Ranges and steps of the evolution variable (default: %default)")
    op.add_option("--inv",             dest="INVORDERING", default=False, action='store_true', help="Use inverted mass ordering (default: %default)")
    op.add_option("--loop",            dest="LOOP",        default=False, action='store_true', help="Use loop-corrected Yukawa (default: %default)")
    op.add_option("--zcut",            dest="ZCUT",        default="1.0",  help="Set cut value for stitching in ARS model")
    opts, args = op.parse_args()


    if len(args)==0:
        print("No parameter space configuration given, exiting.")
        sys.exit(1)

    # Disect the zrange string
    zmin, zmax, zsteps = opts.ZRANGE.split(",")
    zmin=float(zmin)
    zmax=float(zmax)
    zsteps=int(zsteps)

    assert(zmin<zmax)
    assert(zsteps>0)

    pfile, gdict = ulysses.tools.parseArgs(args)

    LEPTO = ulysses.selectModel(opts.MODEL,
                                zmin=zmin, zmax=zmax, zsteps=zsteps,
                                ordering=int(opts.INVORDERING),
                                loop=opts.LOOP,
                                debug=opts.DEBUG,
                                zcut=float(opts.ZCUT),
                                **gdict
                                )


    # Read parameter card and very explicit checks on parameter names
    _, FIX, isCasIb = ulysses.readConfig(pfile)

    if isCasIb:
        if len(FIX) != len(LEPTO.pnames):
            print("Error, the number of parameters needs to be {}, user supplied {}, exiting".format(len(LEPTO.pnames), len(FIX)))
            sys.exit(1)

        for p in FIX.keys():
            if not p in LEPTO.pnames:
                print("Parameter {} in input file {} not recognised, exiting".format(p, args[0]))
                sys.exit(1)

        for p in LEPTO.pnames:
            if not p in FIX.keys():
                print("Parameter {} not provided in input file {}, exiting".format(p, args[0]))
                sys.exit(1)
    else:
        print(" beware!")
        LEPTO.isCasasIbarrra = False


    if opts.DEBUG:
        print(LEPTO)

    etaB = LEPTO(FIX)
    print(LEPTO.h)
    if opts.DEBUG:
        LEPTO.printParams()
        print(LEPTO.U)
        
#Defining constants for the conversion, values taken from the PDG
    mp = 1.672621898*1e-24 #proton mass in g
    ngamma = 410.7 #present photon number density in cm^-3
    rhoc = 1.87840*1e-29 #critical density of the Universe in h^2 g cm^-3 
    gstaro = 43/11 #entropic effective degrees of freedom at present
    ToYb = 45 * zeta(3) / (gstaro * np.pi**4)
    ToOmegab = mp * ngamma / rhoc
    
    print("{}{}\n{}{}\n{}{}".format(
        "eta_b".ljust(      14), etaB,
        "Y_b".ljust(        14), etaB * ToYb,
        "Omega_b h^2".ljust(14), etaB * ToOmegab)
        )
    if opts.OUTPUT is not None:
        # TODO header for text outputs
        D=LEPTO.evolData
        if opts.OUTPUT.endswith(".txt"):
            np.savetxt(opts.OUTPUT, D)
        elif opts.OUTPUT.endswith(".csv"):
            np.savetxt(opts.OUTPUT, D, delimiter=",")
        else:
            plotEvolution(LEPTO, opts.OUTPUT)
        if opts.DEBUG:
            print("Output written to {}".format(opts.OUTPUT))

